package com.gamepop{	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import com.gamepop.utils.GamePopUtils;		public class GamePopClient	{		private var apiRequest : GamePopRequest;		private var key        : String;				[readonly]		private var _username  : String;				public static function clientWithApiKeyAndUsername(apiKey:String, username:String):GamePopClient		{			var client : GamePopClient = new GamePopClient();						client._username  = username;			client.apiRequest = new GamePopRequest(apiKey);						return client;		}				public function GamePopClient()		{			apiRequest = new GamePopRequest();		}				public function get username():String		{			return _username;		}						public function version(callback:Function):void		{			var action : GamePopAction = new GamePopAction();			action.method   = URLRequestMethod.GET;			action.endpoint = "/system/version";						apiRequest.execute(action, function(error:GamePopError, response:GamePopResponse)			{				// this callback is form the user				callback(error, response);			});		}				public function authenticateUser(name:String, password:String, callback:Function):void		{			var action : GamePopAction = new GamePopAction();			var data   : URLVariables = new URLVariables();						data.username = name;			data.password = password;									action.method   = URLRequestMethod.POST;			action.endpoint = "http://gamepopapp.com/accounts/login";			action.data     = data;						apiRequest.execute(action, function(error:GamePopError, response:GamePopResponse)			{				// this callback is form the user				callback(error, response);			});		}				public function registerUser(email:String, name:String, password:String, passwordVerify:String, callback:Function):void		{			var action : GamePopAction = new GamePopAction();			var data   : URLVariables = new URLVariables();						data.email           = email;			data.username        = name;			data.password        = password;			data.password_verify = passwordVerify									action.method   = URLRequestMethod.POST;			action.endpoint = "http://gamepopapp.com/accounts/register";			action.data     = data;						apiRequest.execute(action, function(error:GamePopError, response:GamePopResponse)			{				// this callback is form the user				callback(error, response);			});		}				public function registerAlias(alias:String, platform:String, callback:Function):void		{			var action : GamePopAction = new GamePopAction();			var data   : URLVariables = new URLVariables();						data.platformAlias   = alias;									action.method   = URLRequestMethod.POST;			action.endpoint = "http://gamepopapp.com/accounts/users/"+ this.username +"/aliases/" + platform;			action.data     = data;						apiRequest.execute(action, function(error:GamePopError, response:GamePopResponse)			{				// this callback is form the user				callback(error, response);			});		}				public function aliases(callback:Function):void		{				var action : GamePopAction = new GamePopAction();			action.method   = URLRequestMethod.GET;			action.endpoint = "http://gamepopapp.com/accounts/users/" + this.username + "/aliases";						apiRequest.execute(action, function(error:GamePopError, response:GamePopResponse)			{				// this callback is form the user				callback(error, response);			});		}				/* test me */		public function playersForMatch(platform:String, gameId:String, matchId:String, callback:Function):void		{			gameId = GamePopUtils.cleanupGameId(gameId);						var action : GamePopAction = new GamePopAction();			action.method   = URLRequestMethod.GET;			action.endpoint = "/matches/" + platform + "/" + gameId  +"/" + matchId + "/players";						apiRequest.execute(action, function(error:GamePopError, response:GamePopResponse)			{				// this callback is form the user				callback(error, response);			});		}				public function searchPlatform(platform:String, query:String, callback:Function):void		{			var action : GamePopAction = new GamePopAction();			action.method   = URLRequestMethod.GET;			action.endpoint = "/games/" + platform + "/search/" + query;						apiRequest.execute(action, function(error:GamePopError, response:GamePopResponse)			{				// this callback is form the user				callback(error, response);			});		}				public function gamesForPlatform(platform:String, callback:Function):void		{			var action : GamePopAction = new GamePopAction();			var query  : URLVariables = new URLVariables();			query.limit = 10;						action.method   = URLRequestMethod.GET;			action.endpoint = "/games/" + platform;			action.query    = query;						apiRequest.execute(action, function(error:GamePopError, response:GamePopResponse)			{				// this callback is form the user				callback(error, response);			});		}				public function matchesScheduled(callback:Function):void		{			var action : GamePopAction = new GamePopAction();			action.method   = URLRequestMethod.GET;			action.endpoint = "/matches/scheduled/" + this.username;						apiRequest.execute(action, function(error:GamePopError, response:GamePopResponse)			{				// this callback is form the user				callback(error, response);			});		}				public function matchesScheduledForPlatformAndTimeInterval(platform:String, timeInterval:String, callback:Function):void		{			var action : GamePopAction = new GamePopAction();			action.method   = URLRequestMethod.GET;			action.endpoint = "/matches/" + platform + "/" + timeInterval;						apiRequest.execute(action, function(error:GamePopError, response:GamePopResponse)			{				// this callback is form the user				callback(error, response);			});		}				public function matchesScheduledForPlatformAndGameAndTimeInterval(platform:String, gameId:String, timeInterval:String, callback:Function):void		{			gameId = GamePopUtils.cleanupGameId(gameId);			trace(gameId);						var action : GamePopAction = new GamePopAction();			action.method   = URLRequestMethod.GET;			action.endpoint = "/matches/" + platform + "/" + gameId + "/" + timeInterval;						apiRequest.execute(action, function(error:GamePopError, response:GamePopResponse)			{				// this callback is form the user				callback(error, response);			});		}	}}